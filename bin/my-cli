#! /usr/bin/env node

const figlet = require('figlet');
const Printer = require('@darkobits/lolcatjs');
const _version = require('../package.json').version;
const {
  program
} = require('commander');
const chalk = require('chalk');
let json2ts = require("json2ts");
const inquirer = require('inquirer');
const shell = require('shelljs');
const ora = require('ora');
const download = require('download-git-repo');

const input = figlet.textSync('My-cli');
const strs = ` \n MY-cli ${_version} \n ${input}`;
const transformed = Printer.fromString(strs);

program.version(transformed);

program
  .option('c, create', '初始化项目');

const dictionary = {
  create(env) {
    inquirer
      .prompt([
        /* Pass your questions in here */
        {
          type: 'text',
          message: '请输入文件夹名称',
          name: 'dirname'
        },
        {
          type: 'list',
          name: 'jskind',
          message: '请选择开发语言',
          choices: ['TypeScript', 'JavaScript']
        }
      ])
      .then((answers) => {
        // Use user feedback for... whatever!!

        const _pwd = shell.pwd().stdout;
        const projectPath = `${_pwd}/${answers.dirname}`;
        shell.rm('-rf', projectPath);
        shell.mkdir(projectPath);
        const spinner = ora('⏰  downloading template...')
        spinner.start();
        const template = 'direct:https://github.com/WangYueYang/my-blog.git';
        download(template, projectPath, {
          clone: true
        }, function (err) {
          spinner.stop();
          if (err) {
            console.log(chalk.red(err, '下载失败'));
          } else {
            // 改package里的配置
            shell.sed('-i', 'react-library', answers.dirname, projectPath + '/package.json');
          }

        });

      })
      .catch((error) => {
        if (error.isTtyError) {
          // Prompt couldn't be rendered in the current environment
        } else {
          // Something else went wrong
        }
      });
  },
  json2ts(url) {
    // fetch
    const data = {
      name: 'wang',
      data: {
        age: 21 || ''
      }
    };
    const jsonContent = JSON.stringify(data);

    let result = json2ts.convert(jsonContent);
    console.log(result)
  }
}

program
  .usage("[cmd] <options>")
  .arguments('<cmd>, [env]') // <cmd> 时 program.oiption 里参数前面不能有 -或者 --
  .action(function (cmd, env) {

    const handle = dictionary[cmd];
    if (handle) {
      handle(env);
    } else {
      console.log(chalk.blue(env), chalk.red(': 暂未支持'));
    }

  })

program.parse(process.argv);