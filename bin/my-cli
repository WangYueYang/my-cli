#! /usr/bin/env node

const figlet = require('figlet');
const Printer = require('@darkobits/lolcatjs');
const _version = require('../package.json').version;
const input = figlet.textSync('My-cli');
const strs = ` \n MY-cli ${_version} \n ${input}`;
const transformed = Printer.fromString(strs);
const {
  program
} = require('commander');
const chalk = require('chalk');
let json2ts = require("json2ts");
const inquirer = require('inquirer');

program.version(transformed);

program
  .option('c, create', '初始化项目');

const dictionary = {
  create(env) {
    inquirer
      .prompt([
        /* Pass your questions in here */
        {
          type: 'text',
          message: '请输入文件夹名称',
          name: 'dirname'
        }
      ])
      .then((answers) => {
        // Use user feedback for... whatever!!

        console.log(answers.dirname)

      })
      .catch((error) => {
        if (error.isTtyError) {
          // Prompt couldn't be rendered in the current environment
        } else {
          // Something else went wrong
        }
      });
  },
  json2ts(url) {
    // fetch
    const data = {
      name: 'wang',
      data: {
        age: 21 || ''
      }
    };
    const jsonContent = JSON.stringify(data);

    let result = json2ts.convert(jsonContent);
    console.log(result)
  }
}

program
  .usage("[cmd] <options>")
  .arguments('<cmd>, [env]') // <cmd> 时 program.oiption 里参数前面不能有 -或者 --
  .action(function (cmd, env) {

    const handle = dictionary[cmd];
    if (handle) {
      handle(env);
    } else {
      console.log(chalk.blue(env), chalk.red(': 暂未支持'));
    }

  })

program.parse(process.argv);